name: Test, Release and Deploy to Heroku

on:
  push:
    branches:
      - main  # Adjust if deploying from a different branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # Adjust if needed

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Unit Tests
        run: python -m unittest discover -v -s ./src/tests -p "test_*.py"

  release:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write # Grant write permissions for creating releases and pushing tags
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # A full history is required for commitizen

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Commitizen
        run: pip install commitizen

      - name: Determine Next Version and Create Tag
        id: create_new_tag
        run: |
          # Get the latest tag, or default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Configure Git user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Determine the next version, create commit, tag, and push
          # Use --retry 2 to handle potential race conditions with git push
          # The [skip ci] in the message prevents an infinite workflow loop
          NEXT_VERSION_OUTPUT=$(cz bump --changelog --increment --yes --no-verify --commit --tag --push --message "chore(release): {{version}} [skip ci]" --retry 2>&1)
          echo "$NEXT_VERSION_OUTPUT"

          # Extract the new version from the output
          NEW_VERSION=$(echo "$NEXT_VERSION_OUTPUT" | grep -oP '(?<=^New version: )v?\d+\.\d+\.\d+' | head -n 1)

          if [ -z "$NEW_VERSION" ]; then
            echo "No new version detected by commitizen. This might mean no conventional commits were found since the last tag."
            echo "new_version_created=false" >> $GITHUB_OUTPUT
            echo "new_version=" >> $GITHUB_OUTPUT
            echo "previous_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "New version: $NEW_VERSION"
            echo "new_version_created=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "previous_tag=$LATEST_TAG" >> $GITHUB_OUTPUT # Store the old tag for changelog generation
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog
        id: changelog
        # Only run if a new version was created
        if: steps.create_new_tag.outputs.new_version_created == 'true'
        run: |
          pip install commitizen
          CURRENT_TAG=${{ steps.create_new_tag.outputs.new_version }}
          PREVIOUS_TAG=${{ steps.create_new_tag.outputs.previous_tag }}

          # If previous_tag is 0.0.0 (initial release), generate changelog from the first commit
          if [ "$PREVIOUS_TAG" == "0.0.0" ]; then
            START_REV=$(git rev-list --max-parents=0 HEAD)
          else
            START_REV=$PREVIOUS_TAG
          fi

          echo "Generating changelog from $START_REV to $CURRENT_TAG"
          CHANGELOG_BODY=$(cz changelog --dry-run --start-rev $START_REV --end-rev $CURRENT_TAG --)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        # Only run if a new version was created
        if: steps.create_new_tag.outputs.new_version_created == 'true'
        with:
          tag_name: ${{ steps.create_new_tag.outputs.new_version }}
          release_name: Release ${{ steps.create_new_tag.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v2

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
      - uses: akhileshns/heroku-deploy@v3.14.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}} 
          heroku_app_name: "nms-optimizer-service" #Must be unique in Heroku
          heroku_email: "john.belew@gmail.com"
